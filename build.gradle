plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
    id "io.freefair.lombok" version "8.4"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.24.0",
    selenideVersion = "6.17.0",
    junitVersion = "5.10.0",
    javaFakerVersion = "1.0.2"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:4.3.1",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.fasterxml.jackson.core:jackson-databind:2.11.2",
            "org.assertj:assertj-core:3.22.0",
            "com.github.javafaker:javafaker:$javaFakerVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion")
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:1.7.29")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    ignoreFailures = true

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task Pet(type: Test) {
    useJUnitPlatform {
        includeTags("Pet")
    }
}

task User(type: Test) {
    useJUnitPlatform {
        includeTags("User")
    }
}

task Order(type: Test) {
    useJUnitPlatform {
        includeTags("Order")
    }
}

task smoke(type: Test) {
    useJUnitPlatform {
        includeTags("smoke")
    }
}

task low(type: Test) {
    useJUnitPlatform {
        includeTags("low")
    }
}

task positive(type: Test) {
    useJUnitPlatform {
        includeTags("positive")
    }
}

task negative(type: Test) {
    useJUnitPlatform {
        includeTags("negative")
    }
}